<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.java.member.dao.mapper.MemberMapper">
<!-- DB의 필드명과 Dto의 필드명이 다를 경우 이렇게 resultMap을 이용하여 선언해줘야한다. 같으면 생략가능 -->
	<resultMap type="com.java.member.dto.MemberDto" id="member_dto">
			<result column="num" property="num"/>
			<result column="id" property="id"/>
			<result column="pw" property="pw"/>
			<result column="name" property="name"/>
			<result column="jumin1" property="jumin1"/>
			<result column="jumin2" property="jumin2"/>
			<result column="email" property="email"/>
			<result column="zipcode" property="zipCode"/>
			<result column="addr" property="addr"/>
			<result column="JOB" property="job"/>
			<result column="MAILING" property="mailing"/>
			<result column="INTEREST" property="interest"/>
			<result column="MEMBER_LEVEL" property="memberLevel"/>
			<result column="REGISTER_DATE" property="registerDate"/>
	</resultMap>

 <!--id식별자, 들어오는 값 형태=parameterType(풀패키지명 써야한다. ArrayList면 java.util.ArrayList), 나가는값=resultType(select에만 씀) -->
	<insert id="member_insert" parameterType="com.java.member.dto.MemberDto">
		insert into member values(member_num_seq.nextval, #{id}, #{ pw}, #{ name}, #{ jumin1}, #{ jumin2}, #{ email}, #{ zipCode}, #{ addr}, #{ job}, #{ mailing}, #{ interest}, #{ memberLevel}, sysdate)
	</insert>
 	
		<!--자료형의 경우는 String 이렇게만 써도 되긴함-->
	<select id="member_id_check" parameterType="java.lang.String" resultType="String">
		select id from member where id=#{id}
	</select>
	
	<select id="member_zipcode" parameterType="String" resultType="com.java.member.dto.ZipcodeDto">
		select * from zipcode where dong=#{checkDong}
	</select>
	
	<select id="member_login" parameterType="java.util.Map" resultType="String">
		select member_level from member where id=#{id} and pw=#{pw}
	</select>
	
	<select id="member_select" parameterType="String" resultMap="member_dto">
		select * from member where id=#{id}
	</select>
	
	<update id="member_update" parameterType="com.java.member.dto.MemberDto">
		update member set pw=#{pw}, email=#{email}, zipcode=#{zipCode}, addr=#{addr}, job=#{job}, mailing=#{mailing}, interest=#{interest} where num=#{num}
	</update>
	
	<delete id="member_delete" parameterType="java.util.Map">
		delete from member where id=#{id} and pw=#{pw}
	</delete>
	
</mapper> 